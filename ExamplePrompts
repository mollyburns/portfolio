/*Recently there has been low morale at Bad Business Entertainment and people have been quitting. In an act of desperation that want to find the lowest paid employee in each department of the company and give each of those employees a 15% raise. Please provide the output of their ID, department, old salary, and new salary to hand off to Accounting. Output should be ordered from highest new salary to lowest new salary. Use a CTE to answer this question.*/

WITH ITraisegroup AS
  (
  SELECT * FROM employee_raise
  WHERE department = 'IT'
  ORDER BY salary asc
  LIMIT 1
),
SALESraisegroup AS
(
  SELECT * FROM employee_raise
  WHERE department = 'Sales'
  ORDER BY salary asc
  LIMIT 1
),
ACCTraisegroup AS
(
  SELECT * FROM employee_raise
  WHERE department = 'Accounting'
  ORDER BY salary asc
  LIMIT 1
)

  SELECT employee_id, department, salary oldsalary, salary*1.15 newsalary
  FROM ITraisegroup
  
UNION 
  
  SELECT employee_id, department, salary oldsalary, salary*1.15 newsalary
  FROM SALESraisegroup
  
UNION
  
  SELECT  employee_id, department, salary oldsalary, salary*1.15 newsalary
  FROM ACCTraisegroup
  ORDER BY newsalary DESC;




/* Suppose you have a table named "Hierarchy" that contains information about the hierarchy of employees in a company. Each row represents a relationship between a supervisor and a subordinate employee, where the "Supervisor_ID" column indicates the ID of the supervisor and the "Employee_ID" column indicates the ID of the subordinate. The top-level supervisor(s) in the hierarchy won't have anything in the "Supervisor_ID" column. They should be level "1". While each subsequent level will be 1 higher. Write a query that returns the employee_id and their level (numeric) for each employee. Order on employee_id from lowest to highest. */

WITH RECURSIVE Hierarchy AS
(SELECT employee_id,supervisor_id, 1 AS level
  FROM employee_hierarchy
  WHERE supervisor_id IS NULL

  UNION ALL
  
  SELECT eh.employee_ID,eh.supervisor_id, level + 1
  FROM employee_hierarchy eh, Hierarchy h
  WHERE eh.supervisor_id = h.employee_id
)

SELECT employee_ID, level 
  from Hierarchy
  ORDER BY employee_ID ASC;




/* My Boss wants a report that shows each employee and their bosses name so he can try to memorize it before our quarterly social event. Provide an output that includes the employee name matched with the name of their boss. If they don't have a boss still include them in the output. Order output on employee name alphabetically. */

SELECT b1.employee_name, b2.employee_name boss_name
  FROM boss b1
  LEFT JOIN boss b2
  ON b1.boss_id = b2.employee_id
  ORDER BY b1.employee_name ASC;




/* Write a query to identify the customer who had the largest number of orders. Return the Customer_ID and number of orders, but if 2 customers had the same amount of orders, return them both. */

SELECT customer_id, number_of_orders
  FROM orders
  HAVING number_of_orders = (SELECT max(number_of_orders) FROM orders);




/* A company is about to launch a new product and wants to estimate how many current customers will buy their new product. To do this, they want to identify all of the past customers who have bought all of their products. They currently only have 4 products. Write a query to identify customer_IDs that have bought all of their current products. Note: If a customer buys many of the same product that still only counts as buying one of their products. */

SELECT p1.customer_id
  FROM purchases p1
  JOIN purchases p2 ON p1.customer_id = p2.customer_id
  JOIN purchases p3 ON p1.customer_id = p3.customer_id
  JOIN purchases p4 ON p1.customer_id = p4.customer_id
  WHERE p1.product_id = 1
  AND p2.product_id = 3
  AND p3.product_id = 2
  AND p4.product_id = 4
  GROUP BY customer_id




/* There's recently been an error on our server where some emails were duplicated. We need to identify those emails so we can remove the duplicates. Write a query to report all the duplicate emails and how many times they are in the database. Output should be in alphabetical order. */

SELECT email, count(email) count
FROM emails
  GROUP BY email
  HAVING count(email) >=2;



/* Write a query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. Output the name, class_id, and grade for those classes. Order on the name alphabetically. */

WITH ranktable AS
  (select *, RANK () OVER (PARTITION BY student_name ORDER BY grade DESC, class_ID ASC) ranking
  FROM highest_grade)

  SELECT student_name, class_id, grade
  FROM ranktable
  WHERE ranking = 1
  ORDER BY student_name ASC
 ;



